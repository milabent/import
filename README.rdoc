= Import

== Install

Add Import to your Gemfile:

    gem 'import', git: 'https://github.com/milabent/import.git', branch: 'master'

Import migrations and execute them:

    rake import_engine:install:migrations
    rake db:migrate

== Prepare

Create your import resource:

    class Import::Resources::User < Import::Resources::HTTPBase
      validates :name, presence: true
      import do
        User.find_or_initialize_by(id: id).update!(name: name, role: role)
      end
    end

Create a plan, e.g. via rails console:

    Plan.create(url: 'http://example.org/users', resource_type: 'Import::Resources::User')

== Run

Run your plans, e.g. via rails console:

    ImportJob.perform_later('all', import_all: true)

    # or
    
    ImportJob.perform_later(Import::Plan.first, import_all: true)

== Import changes

You can add a placeholder to tell the server about the last successful import:

    Plan.create(url: 'http://example.org/users?continue_from=###LAST_SUCCESS###')

This allows the server to reduce the export to latest changes. The placeholder is replaced with an UTC ISO 8610 time like 2015-06-25T13:19:06Z.

To trigger a partial import omit the import_all flag:

    ImportJob.perform_later('all')

== Extend Import::Plan

Often you'll need additional information during the import. You can add fields via migration to table import_plans and extend the model like this:

    # yourapp/app/models/import/plan.rb

    # Ensure the original model is loaded before:
    require_dependency Import::Engine.root.join('app', 'models', 'import', 'plan')

    class Import::Plan < ActiveRecord::Base
      belongs_to :user_group
      validates :user_group, presence: true
    end

This allows you to use this fields for the import:

    class Import::Resources::User < Import::Resources::HTTPBase
      validates :name, presence: true
      import do |plan|
        ::User.create!(name: name, group: plan.user_group)
      end
    end

== Delete old resources

This Gem deals with imports. However, often an import includes deleting obsolete resources from the database. To run code after the import you can use one of the hooks `after_import_all`, `after_import_changes` or `after_import` (the latter running in both cases):

    class Import::Resources::User < Import::Resources::HTTPBase
      validates :name, presence: true

      import do
        User.find_or_initialize_by(id: id, import_plan: plan).
          update!(name: name, role: role)
      end

      after_import_all do |plan, collection|
        User.where(import_plan: plan).
          where.not(id: collection.map(&:id)).destroy_all
      end
    end

In this example the user model saves the import plan, so that only related entries are deleted. Note that this approach doesn't work with `after_import_changes`, because the collection would only contain changed resources.
    ImportJob.send(:prepend, ImportJobExtension)
